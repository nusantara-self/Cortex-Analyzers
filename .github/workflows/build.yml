name: build

on:
  push:
    branches:
      - develop

jobs:
  generate-matrix:
    name: Generate Matrix
    runs-on: ubuntu-latest
    outputs:
      responders_matrix: ${{ steps.set-matrix.outputs.responders_matrix }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # - name: Generate responders matrix
      #   id: set-matrix
      #   run: |
      #     echo "Listing responder directories in 'responders/'..."
      #     responder_dirs=$(find responders -mindepth 1 -maxdepth 1 -type d -printf '%f\n')
      #     echo "Found responder directories:"
      #     echo "$responder_dirs"
          
      #     responders_matrix='{"include": []}'
          
      #     for dir in $responder_dirs; do
      #       echo "Processing directory: $dir"
      #       for file in responders/"$dir"/*.json; do
      #         if [ -f "$file" ]; then
      #           echo "Found JSON file: $file"
      #           json_name=$(basename "$file")
      #           responders_matrix=$(echo "$responders_matrix" | jq --arg dir "$dir" --arg json_name "$json_name" \
      #             '.include += [{directory: $dir, json_file: $json_name, path: ($dir + "/" + $json_name)}]')
      #         fi
      #       done
      #     done
          
      #     echo "Generated responders matrix: $responders_matrix"
      #     {
      #       echo "responders_matrix<<EOF"
      #       echo "$responders_matrix"
      #       echo "EOF"
      #     } >> "$GITHUB_OUTPUT"
      - name: Generate responders matrix
        id: set-matrix
        run: |
          # For testing, we create a matrix with a single element.
          test_matrix='{
            "include": [
              {
                "directory": "Velociraptor",
                "json_file": "velociraptor_flow.json",
                "path": "Velociraptor/velociraptor_flow.json"
              }
            ]
          }'
          
          echo "Generated test responders matrix: $test_matrix"
          {
            echo "responders_matrix<<EOF"
            echo "$test_matrix"
            echo "EOF"
          } >> "$GITHUB_OUTPUT"


  build_responders:
    name: Build Responders
    needs: generate-matrix
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(needs.generate-matrix.outputs.responders_matrix) }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker Hub Login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Convert directory to lowercase
        id: lowercase_dir
        run: |
          lower_dir=$(echo "${{ matrix.directory }}" | tr '[:upper:]' '[:lower:]')
          echo "lower_dir=${lower_dir}" >> $GITHUB_ENV

      - name: Parse JSON and set lowercased name (using jq)
        id: parse_json
        run: |
          # Loop over JSON files in the directory (if more than one, this example picks the first one)
          for json_file in ./responders/${{ matrix.directory }}/*.json; do
            if [ -f "$json_file" ]; then
              # Extract and convert to lowercase using jq
              lower_name=$(jq -r '.name | ascii_downcase' "$json_file")
              echo "Found JSON file: $json_file"
              echo "Lowercase Name: $lower_name"
              # Export the value for subsequent steps
              echo "LOWERCASE_NAME=${lower_name}" >> $GITHUB_ENV
              # If you only need one JSON file, you can break after processing the first one.
              break
            fi
          done
    
      - name: Build and push multi-arch image
        uses: docker/build-push-action@v3 
        with:
          context: responders/${{ matrix.directory }}
          # Use the Dockerfile in the worker folder
          file: ./responders/${{ matrix.directory }}/Dockerfile
          # Build for both amd64 and arm64.
          platforms: linux/amd64,linux/arm64
          # Push the image so that a manifest is created.
          push: true
          # Set your image tag (adjust the repository and tag as needed).
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.LOWERCASE_NAME }}:latest
          # Add labels to the image.
          labels: |
            schema-version=1.0
            org.label-schema.build-date=${{ steps.build_date.outputs.date }}
            org.label-schema.name=analyzer
            org.label-schema.description=Fallback analyzer build
            org.label-schema.url=https://thehive-project.org
            org.label-schema.vcs-url=https://github.com/TheHive-Project/Cortex-Analyzers
            org.label-schema.vcs-ref=${{ github.sha }}
            org.label-schema.vendor=TheHive Project
            org.label-schema.version=1.0.0
